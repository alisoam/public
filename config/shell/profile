if [ -e "$HOME/.secrets" ]; then
    source "$HOME/.secrets"
fi

[ -x "$(command -v setxkbmap)" ] && setxkbmap -option caps:escape

if [ -d "$HOME/bin" ] ; then
    PATH="$HOME/bin:$PATH"
fi

if [ -d "$HOME/.local/bin" ] ; then
    PATH="$HOME/.local/bin:$PATH"
fi

if [ -e "/home/linuxbrew/.linuxbrew/bin/brew" ]; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

if [ -d "$HOME/.local/share/coursier/bin" ] ; then
    PATH="$PATH:$HOME/.local/share/coursier/bin"
fi

if [ -e "$HOME/.cargo/env" ]; then
    . "$HOME/.cargo/env"
fi

if [ -x "$(command -v pyenv)" ]; then
    export PYENV_ROOT="$HOME/.pyenv"
    command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"

    if [ -x "$(command -v pyenv-virtualenvwrapper)" ]; then
        export PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV="true"
        pyenv virtualenvwrapper
    fi
fi

if [ -e "$HOME/go" ]; then
    export GOPATH="$HOME/gopath"
    export GOHOME="$HOME/go"
    export PATH="$PATH:/usr/local/go/bin:$GOHOME/bin:$GOPATH/bin/"
fi

if [ -e "$HOME/esp/xtensa-esp32-elf/bin" ]; then
    export IDF_PATH="$HOME/esp/esp-idf"
    export PATH="$PATH:$HOME/esp/xtensa-esp32-elf/bin:$IDF_PATH/tools"
fi

export KUBE_EDITOR=nvim

alias gdb=gdb-multiarch
alias reset='reset;[ -z "$TMUX" ] || tmux clear-history'
alias vim='nvim'

alias d='docker'
alias dr='docker run'
alias dc='docker-compose'
alias dcr='docker-compose run --rm -it'
alias dce='docker-compose exec -it'
alias v='nvim'
alias k='kubectl'
alias kg='kubectl get'
alias ke='kubectl edit'
alias kl='kubectl logs -f'
alias kgp='kubectl get pod'
alias kgd='kubectl get deployment'
alias kgr='kubectl get rs'
alias kgs='kubectl get sts'
alias kex='kubectl exec -it'
alias grp='grep -nwre'

export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

function ssh_helper {
  autossh -M 0 $1 ${@:2} -t 'zsh -c "source $HOME/.zshrc; [ -x "$(command -v tmux)" ] && tmux new -A -s ssh || zsh"'
}

alias srv="ssh_helper srv"
alias pc="ssh_helper pc"
alias laptop="ssh_helper laptop"

function enable_proxy {
    export http_proxy=http://172.20.0.1:2081
    export HTTP_PROXY=http://172.20.0.1:2081
    export https_proxy=http://172.20.0.1:2081
    export HTTPS_PROXY=http://172.20.0.1:2081
}

function disable_proxy {
    export http_proxy=
    export HTTP_PROXY=
    export https_proxy=
    export HTTPS_PROXY=
}

function wake_on_lan {
    BROADCAST=255.255.255.255
    PORT=4000

    target=$(echo ${1} | sed 's/[ :-]//g')
    sync=$(awk "BEGIN {for (i = 0; i < 6; ++i) printf \"ff\" }")
    mac=$(awk "BEGIN {for (i = 0; i < 16; ++i) printf \"${target}\" }")
    packet=$(echo -e "${sync}${mac}" | sed -e 's/../\\x&/g')

    echo -e ${packet}  | nc -w1 -u -b $BROADCAST $PORT
}
