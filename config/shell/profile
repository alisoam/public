if [ -e "$HOME/.secrets" ]; then
    source "$HOME/.secrets"
fi

if [ -d "$HOME/bin" ] ; then
    PATH="$HOME/bin:$PATH"
fi

if [ -d "$HOME/.local/bin" ] ; then
    PATH="$HOME/.local/bin:$PATH"
fi

if [ -e "/home/linuxbrew/.linuxbrew/bin/brew" ]; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

if [ -n "$( command -v pyenv )" ]; then
    export PYENV_ROOT="$HOME/.pyenv"
    eval "$( pyenv init - )" >/dev/null 2>&1
    eval "$( pyenv virtualenv-init - )" >/dev/null 2>&1
fi

if [ -d "$HOME/.local/share/coursier/bin" ] ; then
    PATH="$PATH:$HOME/.local/share/coursier/bin"
fi

if [ -e "$HOME/.cargo/env" ]; then
    . "$HOME/.cargo/env"
fi

if [ -e "$HOME/go" ]; then
    export GOPATH="$HOME/gopath"
    export GOHOME="$HOME/go"
    export PATH="$PATH:/usr/local/go/bin:$GOHOME/bin:$GOPATH/bin/"
fi

if [ -e "$HOME/esp/xtensa-esp32-elf/bin" ]; then
    export IDF_PATH="$HOME/esp/esp-idf"
    export PATH="$PATH:$HOME/esp/xtensa-esp-elf/bin:$IDF_PATH/tools"
fi

if [ -n "$( command -v thefuck )" ]; then
    eval "$(thefuck --alias)"
fi

export KUBE_EDITOR=nvim

alias gdb=gdb-multiarch
alias reset='reset;[ -z "$TMUX" ] || tmux clear-history'
alias vim='nvim'

alias d='docker'
alias dr='docker run'
alias dc='docker compose'
alias dcr='docker compose run --rm -it'
alias dce='docker compose exec -it'
alias v='nvim'
alias k='kubectl'
alias kg='kubectl get'
alias ke='kubectl edit'
alias kl='kubectl logs -f'
alias kgp='kubectl get pod'
alias kgd='kubectl get deployment'
alias kgr='kubectl get rs'
alias kgs='kubectl get sts'
alias kex='kubectl exec -it'
alias grp='grep -nwre'
alias f='fuck --yeah'

export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

if [ -n "$TMUX" ]; then
  # only for ssh sessions
  session_name=$(tmux display-message -p "#S")
  if [ "${session_name#"ssh-"}" != "$session_name" ]; then
    # Set a trap for SIGHUP to update SSH_AUTH_SOCK
    trap 'export SSH_AUTH_SOCK=$(tmux show-environment SSH_AUTH_SOCK | cut -d= -f2-)' HUP
  fi
fi

function mssh {
  autossh -M 0 $1 ${@:2} -t "tmux new -A -s ssh-${HOST}"
}

function enable_proxy {
    export http_proxy=http://172.20.0.1:2081
    export HTTP_PROXY=http://172.20.0.1:2081
    export https_proxy=http://172.20.0.1:2081
    export HTTPS_PROXY=http://172.20.0.1:2081
}

function disable_proxy {
    export http_proxy=
    export HTTP_PROXY=
    export https_proxy=
    export HTTPS_PROXY=
}

if [ -e "$HOME/.locals" ]; then
    source "$HOME/.locals"
fi
